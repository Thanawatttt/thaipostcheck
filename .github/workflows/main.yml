name: Build & Release Electron App

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}  # <- ใช้ secret สำหรับ private repo

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Install Electron explicitly
        run: npm install --save-dev electron

      - name: Build Electron App
        run: npm run build

      - name: Package Electron App
        run: npx electron-builder --win --x64 --publish always

      - name: Create Release Tag
        id: tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          new_patch=$((patch + 1))
          new_tag="v$major.$minor.$new_patch"
          echo "New tag: $new_tag"
          echo "tag=$new_tag" >> $GITHUB_OUTPUT
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $new_tag
          git push origin $new_tag

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
          token: ${{ secrets.GH_TOKEN }}  # <- เพิ่ม token

      - name: Upload EXE to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*.exe
          asset_name: MyApp-${{ steps.tag.outputs.tag }}.exe
          asset_content_type: application/octet-stream
          token: ${{ secrets.GH_TOKEN }}  # <- เพิ่ม token
